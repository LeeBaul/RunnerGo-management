// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"kp-management/internal/pkg/dal/model"
)

func newFolder(db *gorm.DB) folder {
	_folder := folder{}

	_folder.folderDo.UseDB(db)
	_folder.folderDo.UseModel(&model.Folder{})

	tableName := _folder.folderDo.TableName()
	_folder.ALL = field.NewField(tableName, "*")
	_folder.ID = field.NewInt64(tableName, "id")
	_folder.TargetID = field.NewInt64(tableName, "target_id")
	_folder.Request = field.NewString(tableName, "request")
	_folder.Script = field.NewString(tableName, "script")
	_folder.CreatedAt = field.NewTime(tableName, "created_at")
	_folder.UpdatedAt = field.NewTime(tableName, "updated_at")
	_folder.DeletedAt = field.NewField(tableName, "deleted_at")

	_folder.fillFieldMap()

	return _folder
}

type folder struct {
	folderDo folderDo

	ALL       field.Field
	ID        field.Int64
	TargetID  field.Int64
	Request   field.String
	Script    field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (f folder) Table(newTableName string) *folder {
	f.folderDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f folder) As(alias string) *folder {
	f.folderDo.DO = *(f.folderDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *folder) updateTableName(table string) *folder {
	f.ALL = field.NewField(table, "*")
	f.ID = field.NewInt64(table, "id")
	f.TargetID = field.NewInt64(table, "target_id")
	f.Request = field.NewString(table, "request")
	f.Script = field.NewString(table, "script")
	f.CreatedAt = field.NewTime(table, "created_at")
	f.UpdatedAt = field.NewTime(table, "updated_at")
	f.DeletedAt = field.NewField(table, "deleted_at")

	f.fillFieldMap()

	return f
}

func (f *folder) WithContext(ctx context.Context) *folderDo { return f.folderDo.WithContext(ctx) }

func (f folder) TableName() string { return f.folderDo.TableName() }

func (f folder) Alias() string { return f.folderDo.Alias() }

func (f *folder) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *folder) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 7)
	f.fieldMap["id"] = f.ID
	f.fieldMap["target_id"] = f.TargetID
	f.fieldMap["request"] = f.Request
	f.fieldMap["script"] = f.Script
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f folder) clone(db *gorm.DB) folder {
	f.folderDo.ReplaceDB(db)
	return f
}

type folderDo struct{ gen.DO }

func (f folderDo) Debug() *folderDo {
	return f.withDO(f.DO.Debug())
}

func (f folderDo) WithContext(ctx context.Context) *folderDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f folderDo) ReadDB() *folderDo {
	return f.Clauses(dbresolver.Read)
}

func (f folderDo) WriteDB() *folderDo {
	return f.Clauses(dbresolver.Write)
}

func (f folderDo) Clauses(conds ...clause.Expression) *folderDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f folderDo) Returning(value interface{}, columns ...string) *folderDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f folderDo) Not(conds ...gen.Condition) *folderDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f folderDo) Or(conds ...gen.Condition) *folderDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f folderDo) Select(conds ...field.Expr) *folderDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f folderDo) Where(conds ...gen.Condition) *folderDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f folderDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *folderDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f folderDo) Order(conds ...field.Expr) *folderDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f folderDo) Distinct(cols ...field.Expr) *folderDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f folderDo) Omit(cols ...field.Expr) *folderDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f folderDo) Join(table schema.Tabler, on ...field.Expr) *folderDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f folderDo) LeftJoin(table schema.Tabler, on ...field.Expr) *folderDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f folderDo) RightJoin(table schema.Tabler, on ...field.Expr) *folderDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f folderDo) Group(cols ...field.Expr) *folderDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f folderDo) Having(conds ...gen.Condition) *folderDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f folderDo) Limit(limit int) *folderDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f folderDo) Offset(offset int) *folderDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f folderDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *folderDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f folderDo) Unscoped() *folderDo {
	return f.withDO(f.DO.Unscoped())
}

func (f folderDo) Create(values ...*model.Folder) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f folderDo) CreateInBatches(values []*model.Folder, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f folderDo) Save(values ...*model.Folder) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f folderDo) First() (*model.Folder, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Folder), nil
	}
}

func (f folderDo) Take() (*model.Folder, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Folder), nil
	}
}

func (f folderDo) Last() (*model.Folder, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Folder), nil
	}
}

func (f folderDo) Find() ([]*model.Folder, error) {
	result, err := f.DO.Find()
	return result.([]*model.Folder), err
}

func (f folderDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Folder, err error) {
	buf := make([]*model.Folder, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f folderDo) FindInBatches(result *[]*model.Folder, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f folderDo) Attrs(attrs ...field.AssignExpr) *folderDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f folderDo) Assign(attrs ...field.AssignExpr) *folderDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f folderDo) Joins(fields ...field.RelationField) *folderDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f folderDo) Preload(fields ...field.RelationField) *folderDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f folderDo) FirstOrInit() (*model.Folder, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Folder), nil
	}
}

func (f folderDo) FirstOrCreate() (*model.Folder, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Folder), nil
	}
}

func (f folderDo) FindByPage(offset int, limit int) (result []*model.Folder, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f folderDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f folderDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f folderDo) Delete(models ...*model.Folder) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *folderDo) withDO(do gen.Dao) *folderDo {
	f.DO = *do.(*gen.DO)
	return f
}
