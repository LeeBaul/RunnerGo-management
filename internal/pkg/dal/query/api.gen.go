// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"kp-management/internal/pkg/dal/model"
)

func newAPI(db *gorm.DB) aPI {
	_aPI := aPI{}

	_aPI.aPIDo.UseDB(db)
	_aPI.aPIDo.UseModel(&model.API{})

	tableName := _aPI.aPIDo.TableName()
	_aPI.ALL = field.NewField(tableName, "*")
	_aPI.ID = field.NewInt64(tableName, "id")
	_aPI.TargetID = field.NewInt64(tableName, "target_id")
	_aPI.URL = field.NewString(tableName, "url")
	_aPI.Header = field.NewString(tableName, "header")
	_aPI.Query = field.NewString(tableName, "query")
	_aPI.Body = field.NewString(tableName, "body")
	_aPI.Auth = field.NewString(tableName, "auth")
	_aPI.Description = field.NewString(tableName, "description")
	_aPI.CreatedAt = field.NewTime(tableName, "created_at")
	_aPI.UpdatedAt = field.NewTime(tableName, "updated_at")

	_aPI.fillFieldMap()

	return _aPI
}

type aPI struct {
	aPIDo aPIDo

	ALL         field.Field
	ID          field.Int64
	TargetID    field.Int64
	URL         field.String
	Header      field.String
	Query       field.String
	Body        field.String
	Auth        field.String
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (a aPI) Table(newTableName string) *aPI {
	a.aPIDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPI) As(alias string) *aPI {
	a.aPIDo.DO = *(a.aPIDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPI) updateTableName(table string) *aPI {
	a.ALL = field.NewField(table, "*")
	a.ID = field.NewInt64(table, "id")
	a.TargetID = field.NewInt64(table, "target_id")
	a.URL = field.NewString(table, "url")
	a.Header = field.NewString(table, "header")
	a.Query = field.NewString(table, "query")
	a.Body = field.NewString(table, "body")
	a.Auth = field.NewString(table, "auth")
	a.Description = field.NewString(table, "description")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")

	a.fillFieldMap()

	return a
}

func (a *aPI) WithContext(ctx context.Context) *aPIDo { return a.aPIDo.WithContext(ctx) }

func (a aPI) TableName() string { return a.aPIDo.TableName() }

func (a aPI) Alias() string { return a.aPIDo.Alias() }

func (a *aPI) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPI) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["id"] = a.ID
	a.fieldMap["target_id"] = a.TargetID
	a.fieldMap["url"] = a.URL
	a.fieldMap["header"] = a.Header
	a.fieldMap["query"] = a.Query
	a.fieldMap["body"] = a.Body
	a.fieldMap["auth"] = a.Auth
	a.fieldMap["description"] = a.Description
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
}

func (a aPI) clone(db *gorm.DB) aPI {
	a.aPIDo.ReplaceDB(db)
	return a
}

type aPIDo struct{ gen.DO }

func (a aPIDo) Debug() *aPIDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIDo) WithContext(ctx context.Context) *aPIDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIDo) ReadDB() *aPIDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIDo) WriteDB() *aPIDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIDo) Clauses(conds ...clause.Expression) *aPIDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIDo) Returning(value interface{}, columns ...string) *aPIDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIDo) Not(conds ...gen.Condition) *aPIDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIDo) Or(conds ...gen.Condition) *aPIDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIDo) Select(conds ...field.Expr) *aPIDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIDo) Where(conds ...gen.Condition) *aPIDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *aPIDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a aPIDo) Order(conds ...field.Expr) *aPIDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIDo) Distinct(cols ...field.Expr) *aPIDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIDo) Omit(cols ...field.Expr) *aPIDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIDo) Join(table schema.Tabler, on ...field.Expr) *aPIDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIDo) LeftJoin(table schema.Tabler, on ...field.Expr) *aPIDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIDo) RightJoin(table schema.Tabler, on ...field.Expr) *aPIDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIDo) Group(cols ...field.Expr) *aPIDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIDo) Having(conds ...gen.Condition) *aPIDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIDo) Limit(limit int) *aPIDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIDo) Offset(offset int) *aPIDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *aPIDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIDo) Unscoped() *aPIDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIDo) Create(values ...*model.API) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIDo) CreateInBatches(values []*model.API, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIDo) Save(values ...*model.API) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIDo) First() (*model.API, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.API), nil
	}
}

func (a aPIDo) Take() (*model.API, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.API), nil
	}
}

func (a aPIDo) Last() (*model.API, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.API), nil
	}
}

func (a aPIDo) Find() ([]*model.API, error) {
	result, err := a.DO.Find()
	return result.([]*model.API), err
}

func (a aPIDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.API, err error) {
	buf := make([]*model.API, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIDo) FindInBatches(result *[]*model.API, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIDo) Attrs(attrs ...field.AssignExpr) *aPIDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIDo) Assign(attrs ...field.AssignExpr) *aPIDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIDo) Joins(fields ...field.RelationField) *aPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIDo) Preload(fields ...field.RelationField) *aPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIDo) FirstOrInit() (*model.API, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.API), nil
	}
}

func (a aPIDo) FirstOrCreate() (*model.API, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.API), nil
	}
}

func (a aPIDo) FindByPage(offset int, limit int) (result []*model.API, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIDo) Delete(models ...*model.API) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIDo) withDO(do gen.Dao) *aPIDo {
	a.DO = *do.(*gen.DO)
	return a
}
