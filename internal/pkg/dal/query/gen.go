// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Operation:      newOperation(db),
		Plan:           newPlan(db),
		PlanEmail:      newPlanEmail(db),
		Report:         newReport(db),
		ReportMachine:  newReportMachine(db),
		Setting:        newSetting(db),
		Target:         newTarget(db),
		Team:           newTeam(db),
		User:           newUser(db),
		UserTeam:       newUserTeam(db),
		Variable:       newVariable(db),
		VariableImport: newVariableImport(db),
	}
}

type Query struct {
	db *gorm.DB

	Operation      operation
	Plan           plan
	PlanEmail      planEmail
	Report         report
	ReportMachine  reportMachine
	Setting        setting
	Target         target
	Team           team
	User           user
	UserTeam       userTeam
	Variable       variable
	VariableImport variableImport
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Operation:      q.Operation.clone(db),
		Plan:           q.Plan.clone(db),
		PlanEmail:      q.PlanEmail.clone(db),
		Report:         q.Report.clone(db),
		ReportMachine:  q.ReportMachine.clone(db),
		Setting:        q.Setting.clone(db),
		Target:         q.Target.clone(db),
		Team:           q.Team.clone(db),
		User:           q.User.clone(db),
		UserTeam:       q.UserTeam.clone(db),
		Variable:       q.Variable.clone(db),
		VariableImport: q.VariableImport.clone(db),
	}
}

type queryCtx struct {
	Operation      *operationDo
	Plan           *planDo
	PlanEmail      *planEmailDo
	Report         *reportDo
	ReportMachine  *reportMachineDo
	Setting        *settingDo
	Target         *targetDo
	Team           *teamDo
	User           *userDo
	UserTeam       *userTeamDo
	Variable       *variableDo
	VariableImport *variableImportDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Operation:      q.Operation.WithContext(ctx),
		Plan:           q.Plan.WithContext(ctx),
		PlanEmail:      q.PlanEmail.WithContext(ctx),
		Report:         q.Report.WithContext(ctx),
		ReportMachine:  q.ReportMachine.WithContext(ctx),
		Setting:        q.Setting.WithContext(ctx),
		Target:         q.Target.WithContext(ctx),
		Team:           q.Team.WithContext(ctx),
		User:           q.User.WithContext(ctx),
		UserTeam:       q.UserTeam.WithContext(ctx),
		Variable:       q.Variable.WithContext(ctx),
		VariableImport: q.VariableImport.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
